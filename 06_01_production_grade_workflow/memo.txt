// how to use docker in real app development?
all move steps below.
1. Development
2. Testing
3. Deployment

// Production Development Workflow
// github
1. pull feature branch
2. add change to feature branch
3. create pull-request to master branch
// Travis CI
4. find master branch change
5. test src
6. push to AWS Hosting

// dev phase
1. create changes to FEATURE branch.
2. push changes of FEATURE branch to github.
3. create pull-request to MASTER branch.
// test phase
4. code pushed to Travis CI
5. tests run
6. merge PR with MASTER
// Production phase
7. code pushed to Travis CI
8. run tests
9. Deploy to AWS Elastic Beanstalk

// where's docker!?
docker is not necessary tool.
docker makes some development flow EASY.

// necessary commands for react
1. npm run start
    only for development.
2. npm run test
    for test.
3. npm run build
    for production.

// build command with Dockerfile.dev
docker build -f Dockerfile.dev .

// react start command
// -it option for preventing react error
docker build -f Dockerfile.dev .
docker run -it -p 3000:3000 [image id]

// react startup command with volume
docker run -it -p 3000:3000 -v /app/node_modules -v $(pwd):/app  [image id]
docker run -it -p 3000:3000 -v /app/node_modules -v $(pwd):/app  06c14

// run test in docker
docker build -f Dockerfile.dev .
docker run -it 35f6815c3 npm run test

// live-updating test
there's 2 ways to accieve this goal.
1. use running container
- docker-compose up
- docker exec -it [container id] npm run test
2. add service to docker-compose.yml file

// plus side of live-updating test
1. interactive
2. easy to start test

// downside of live-updating test
1. need to do commands, need id
2. no interaction

// build product
docker build -t hiranokuosaka/frontend:latest .

// run product
docker run -p 8080:80 hiranokuosaka/frontend